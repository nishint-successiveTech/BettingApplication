import type { Evaluate } from '@sinclair/typebox/build/cjs/type/helpers';
import type { TOptional } from '@sinclair/typebox/build/cjs/type/optional';
import type { TReadonly } from '@sinclair/typebox/build/cjs/type/readonly';
import type { TArray } from '@sinclair/typebox/build/cjs/type/array';
import type { TAsyncIterator } from '@sinclair/typebox/build/cjs/type/async-iterator';
import type { TConstructor } from '@sinclair/typebox/build/cjs/type/constructor';
import type { TEnum } from '@sinclair/typebox/build/cjs/type/enum';
import type { TFunction } from '@sinclair/typebox/build/cjs/type/function';
import type { TIntersect } from '@sinclair/typebox/build/cjs/type/intersect';
import type { TImport } from '@sinclair/typebox/build/cjs/type/module';
import type { TIterator } from '@sinclair/typebox/build/cjs/type/iterator';
import type { TNot } from '@sinclair/typebox/build/cjs/type/not';
import type { TObject, TProperties } from '@sinclair/typebox/build/cjs/type/object';
import type { TPromise } from '@sinclair/typebox/build/cjs/type/promise';
import type { TRecursive } from '@sinclair/typebox/build/cjs/type/recursive';
import type { TRecord } from '@sinclair/typebox/build/cjs/type/record';
import type { TRef } from '@sinclair/typebox/build/cjs/type/ref';
import type { TTuple } from '@sinclair/typebox/build/cjs/type/tuple';
import type { TUnion } from '@sinclair/typebox/build/cjs/type/union';
import type { TUnsafe } from '@sinclair/typebox/build/cjs/type/unsafe';
import type { TSchema } from '@sinclair/typebox/build/cjs/type/schema';
import type { TTransform } from '@sinclair/typebox/build/cjs/type/transform';
import type { TNever } from '@sinclair/typebox/build/cjs/type/never';
type TDecodeImport<ModuleProperties extends TProperties, Key extends PropertyKey> = (Key extends keyof ModuleProperties ? TDecodeType<ModuleProperties[Key]> extends infer Type extends TSchema ? Type extends TRef<infer Ref extends string> ? TDecodeImport<ModuleProperties, Ref> : Type : TNever : TNever);
type TDecodeProperties<Properties extends TProperties> = {
    [Key in keyof Properties]: TDecodeType<Properties[Key]>;
};
type TDecodeTypes<Types extends TSchema[], Result extends TSchema[] = []> = (Types extends [infer Left extends TSchema, ...infer Right extends TSchema[]] ? TDecodeTypes<Right, [...Result, TDecodeType<Left>]> : Result);
export type TDecodeType<Type extends TSchema> = (Type extends TOptional<infer Type extends TSchema> ? TOptional<TDecodeType<Type>> : Type extends TReadonly<infer Type extends TSchema> ? TReadonly<TDecodeType<Type>> : Type extends TTransform<infer _Input extends TSchema, infer Output> ? TUnsafe<Output> : Type extends TArray<infer Type extends TSchema> ? TArray<TDecodeType<Type>> : Type extends TAsyncIterator<infer Type extends TSchema> ? TAsyncIterator<TDecodeType<Type>> : Type extends TConstructor<infer Parameters extends TSchema[], infer InstanceType extends TSchema> ? TConstructor<TDecodeTypes<Parameters>, TDecodeType<InstanceType>> : Type extends TEnum<infer Values> ? TEnum<Values> : Type extends TFunction<infer Parameters extends TSchema[], infer ReturnType extends TSchema> ? TFunction<TDecodeTypes<Parameters>, TDecodeType<ReturnType>> : Type extends TIntersect<infer Types extends TSchema[]> ? TIntersect<TDecodeTypes<Types>> : Type extends TImport<infer ModuleProperties extends TProperties, infer Key> ? TDecodeImport<ModuleProperties, Key> : Type extends TIterator<infer Type extends TSchema> ? TIterator<TDecodeType<Type>> : Type extends TNot<infer Type extends TSchema> ? TNot<TDecodeType<Type>> : Type extends TObject<infer Properties extends TProperties> ? TObject<Evaluate<TDecodeProperties<Properties>>> : Type extends TPromise<infer Type extends TSchema> ? TPromise<TDecodeType<Type>> : Type extends TRecord<infer Key extends TSchema, infer Value extends TSchema> ? TRecord<Key, TDecodeType<Value>> : Type extends TRecursive<infer Type extends TSchema> ? TRecursive<TDecodeType<Type>> : Type extends TRef<infer Ref extends string> ? TRef<Ref> : Type extends TTuple<infer Types extends TSchema[]> ? TTuple<TDecodeTypes<Types>> : Type extends TUnion<infer Types extends TSchema[]> ? TUnion<TDecodeTypes<Types>> : Type);
export type StaticDecodeIsAny<Type> = boolean extends (Type extends TSchema ? true : false) ? true : false;
/** Creates an decoded static type from a TypeBox type */
export type StaticDecode<Type extends TSchema, Params extends unknown[] = [], Result = StaticDecodeIsAny<Type> extends true ? unknown : Static<TDecodeType<Type>, Params>> = Result;
/** Creates an encoded static type from a TypeBox type */
export type StaticEncode<Type extends TSchema, Params extends unknown[] = [], Result = Static<Type, Params>> = Result;
/** Creates a static type from a TypeBox type */
export type Static<Type extends TSchema, Params extends unknown[] = [], Result = (Type & {
    params: Params;
})['static']> = Result;
export {};
