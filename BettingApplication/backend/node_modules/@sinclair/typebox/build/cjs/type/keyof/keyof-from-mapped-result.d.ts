import type { SchemaOptions } from '@sinclair/typebox/build/cjs/type/schema';
import type { Ensure, Evaluate } from '@sinclair/typebox/build/cjs/type/helpers';
import type { TProperties } from '@sinclair/typebox/build/cjs/type/object';
import { type TMappedResult } from '@sinclair/typebox/build/cjs/type/mapped';
import { type TKeyOfFromType } from '@sinclair/typebox/build/cjs/type/keyof/keyof';
type TFromProperties<Properties extends TProperties> = ({
    [K2 in keyof Properties]: TKeyOfFromType<Properties[K2]>;
});
type TFromMappedResult<MappedResult extends TMappedResult> = (Evaluate<TFromProperties<MappedResult['properties']>>);
export type TKeyOfFromMappedResult<MappedResult extends TMappedResult, Properties extends TProperties = TFromMappedResult<MappedResult>> = (Ensure<TMappedResult<Properties>>);
export declare function KeyOfFromMappedResult<MappedResult extends TMappedResult, Properties extends TProperties = TFromMappedResult<MappedResult>>(mappedResult: MappedResult, options?: SchemaOptions): TMappedResult<Properties>;
export {};
